import type { Metadata } from "next"
import { notFound } from "next/navigation"
import { ExploitsService } from "@/lib/database-services/exploits-service"
import ExploitDetail from "@/components/exploit-detail"

interface ExploitPageProps {
  params: { id: string }
}

export async function generateMetadata({ params }: ExploitPageProps): Promise<Metadata> {
  try {
    const exploit = await ExploitsService.getExploitById(params.id)

    if (!exploit) {
      return {
        title: "Exploit Not Found | Cyberpunk Web Shell Hub",
        description: "The requested exploit could not be found.",
      }
    }

    const title = `${exploit.name} | Cyberpunk Web Shell Hub`
    const description =
      exploit.description.length > 160 ? exploit.description.substring(0, 157) + "..." : exploit.description

    const keywords = [
      exploit.name,
      exploit.target_system,
      exploit.severity,
      "exploit",
      "vulnerability",
      "cybersecurity",
      "penetration testing",
      "security research",
      ...(exploit.tags || []),
      ...(exploit.cve_id ? [exploit.cve_id] : []),
    ].join(", ")

    return {
      title,
      description,
      keywords,
      authors: [
        {
          name: exploit.author?.username || "Anonymous",
          url: "https://cyberpunkwebshell.com",
        },
      ],
      creator: exploit.author?.username || "Anonymous",
      publisher: "Cyberpunk Web Shell Hub",
      robots: {
        index: exploit.is_verified,
        follow: exploit.is_verified,
        googleBot: {
          index: exploit.is_verified,
          follow: exploit.is_verified,
        },
      },
      openGraph: {
        title,
        description,
        type: "article",
        publishedTime: exploit.created_at,
        modifiedTime: exploit.updated_at,
        authors: [exploit.author?.username || "Anonymous"],
        tags: exploit.tags || [],
        siteName: "Cyberpunk Web Shell Hub",
        locale: "en_US",
        url: `https://cyberpunkwebshell.com/exploits/${exploit.id}`,
        images: [
          {
            url: `/api/og/exploit?id=${exploit.id}`,
            width: 1200,
            height: 630,
            alt: `${exploit.name} - Cyberpunk Web Shell Hub`,
          },
        ],
      },
      twitter: {
        card: "summary_large_image",
        title,
        description,
        creator: "@cyberpunkshell",
        site: "@cyberpunkshell",
        images: [`/api/og/exploit?id=${exploit.id}`],
      },
      alternates: {
        canonical: `https://cyberpunkwebshell.com/exploits/${exploit.id}`,
      },
      other: {
        "article:author": exploit.author?.username || "Anonymous",
        "article:published_time": exploit.created_at,
        "article:modified_time": exploit.updated_at,
        "article:section": "Cybersecurity",
        "article:tag": exploit.tags?.join(", ") || "",
      },
    }
  } catch (error) {
    console.error("Error generating metadata for exploit:", error)
    return {
      title: "Exploit Not Found | Cyberpunk Web Shell Hub",
      description: "The requested exploit could not be found.",
    }
  }
}

export async function generateStaticParams() {
  try {
    const exploits = await ExploitsService.getVerifiedExploits()
    return exploits.map((exploit) => ({
      id: exploit.id,
    }))
  } catch (error) {
    console.error("Error generating static params for exploits:", error)
    return []
  }
}

export default async function ExploitPage({ params }: ExploitPageProps) {
  try {
    const exploit = await ExploitsService.getExploitById(params.id)

    if (!exploit || !exploit.is_verified) {
      notFound()
    }

    // JSON-LD structured data for SEO
    const jsonLd = {
      "@context": "https://schema.org",
      "@type": "TechArticle",
      headline: exploit.name,
      description: exploit.description,
      author: {
        "@type": "Person",
        name: exploit.author?.username || "Anonymous",
        email: exploit.author?.email,
      },
      publisher: {
        "@type": "Organization",
        name: "Cyberpunk Web Shell Hub",
        logo: {
          "@type": "ImageObject",
          url: "https://cyberpunkwebshell.com/logo.png",
        },
      },
      datePublished: exploit.created_at,
      dateModified: exploit.updated_at,
      mainEntityOfPage: {
        "@type": "WebPage",
        "@id": `https://cyberpunkwebshell.com/exploits/${exploit.id}`,
      },
      keywords: [
        exploit.name,
        exploit.target_system,
        exploit.severity,
        "exploit",
        "vulnerability",
        "cybersecurity",
        ...(exploit.tags || []),
        ...(exploit.cve_id ? [exploit.cve_id] : []),
      ],
      about: {
        "@type": "Thing",
        name: exploit.target_system,
        description: `Security vulnerability in ${exploit.target_system}`,
      },
      mentions: exploit.cve_id
        ? [
            {
              "@type": "Thing",
              name: exploit.cve_id,
              url: `https://nvd.nist.gov/vuln/detail/${exploit.cve_id}`,
            },
          ]
        : [],
      articleSection: "Cybersecurity",
      inLanguage: "en-US",
      isAccessibleForFree: true,
      creativeWorkStatus: "Published",
    }

    return (
      <>
        <script type="application/ld+json" dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }} />
        <main className="container mx-auto px-4 py-8">
          <div className="max-w-4xl mx-auto">
            <ExploitDetail exploit={exploit} />
          </div>
        </main>
      </>
    )
  } catch (error) {
    console.error("Error loading exploit page:", error)
    notFound()
  }
}
