import { NextRequest, NextResponse } from "next/server";
import connectDB from "@/lib/connectDB";
import Exploits from "@/models/ExploitsModel";
import { getAuthUser } from "@/lib/auth";
import { createExploitSchema } from "@/lib/validation";

export async function POST(request: NextRequest) {
  try {
    await connectDB();
    const authUser = await getAuthUser(request);

    if (!authUser) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    if (authUser.role !== "admin") {
      return NextResponse.json({ error: "Forbidden" }, { status: 403 });
    }

    const body = await request.json();

    const result = createExploitSchema.safeParse(body);

    if (!result.success) {
      const message = result.error.errors[0]?.message || "Invalid input.";
      return NextResponse.json({ error: message }, { status: 400 });
    }

    const {
      id,
      name,
      description,
      code,
      target_system,
      cve_id,
      severity,
      tags,
      is_verified,
    } = result.data;

    if (!id) {
      return NextResponse.json(
        { error: "Exploit ID is required." },
        { status: 400 }
      );
    }

    const exploit = await Exploits.findById(id);

    if (!exploit) {
      return NextResponse.json(
        { error: "Exploit not found." },
        { status: 404 }
      );
    }

    const existing = await Exploits.findOne({
      code: code.trim(),
      _id: { $ne: id },
    });

    if (existing) {
      return NextResponse.json(
        { error: "Another exploit with this code already exists." },
        { status: 409 }
      );
    }

    const updatedExploit = await Exploits.findByIdAndUpdate(
      id,
      {
        name,
        description,
        code: code.trim(),
        target_system,
        cve_id,
        severity,
        tags,
        is_verified,
        updated_at: new Date(),
      },
      {
        new: true,
        select:
          "_id name description code target_system cve_id severity tags is_verified created_at updated_at",
      }
    );

    return NextResponse.json(
      { message: "Exploit updated successfully.", exploit: updatedExploit },
      { status: 200 }
    );
  } catch (error) {
    console.error("Error updating exploit:", error);
    return NextResponse.json(
      { error: "Failed to update exploit." },
      { status: 500 }
    );
  }
}
