import { NextRequest, NextResponse } from "next/server";
import connectDB from "@/lib/connectDB";
import Exploits from "@/models/ExploitsModel";
import { getAuthUser } from "@/lib/auth";

export async function POST(request: NextRequest) {
  try {
    await connectDB();
    const authUser = await getAuthUser(request);

    if (!authUser) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    if (authUser.role !== "admin") {
      return NextResponse.json({ error: "Forbidden" }, { status: 403 });
    }

    const { search } = await request.json();

    const query: any = {};

    if (search) {
      const regex = new RegExp(search, "i");
      query.$or = [{ name: regex }, { description: regex }, { code: regex }];
    }

    const exploits = await Exploits.find({ ...query, deleted_at: null })
      .populate("author_id", "username email")
      .select("-__v")
      .sort({ created_at: -1 })
      .limit(100);

    const formattedExploits = exploits.map((item) => {
      const obj = Object.fromEntries(
        Object.entries(item.toObject()).filter(([key]) => key !== "_id")
      );

      return {
        id: item._id,
        author: item.author_id
          ? {
              username: item.author_id.username,
              email: item.author_id.email,
            }
          : null,
        author_id: item.author_id,
        ...obj,
      };
    });

    return NextResponse.json({ exploits: formattedExploits }, { status: 200 });
  } catch (error) {
    console.error("Error fetching exploits:", error);
    return NextResponse.json(
      { error: "Failed to fetch exploits." },
      { status: 500 }
    );
  }
}
