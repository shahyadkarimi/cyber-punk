"use client"

import { useState } from "react"
import { Calendar, User, Server, Copy, Check, Code, ChevronDown, ChevronUp, Shield } from "lucide-react"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import type { Exploit } from "@/lib/database-services/exploits-service"
import Link from "next/link"

interface ExploitCardProps {
  exploit: Exploit
}

export default function ExploitCard({ exploit }: ExploitCardProps) {
  const [showCode, setShowCode] = useState(false)
  const [copied, setCopied] = useState(false)

  const copyToClipboard = () => {
    navigator.clipboard.writeText(exploit.code || "")
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  const getSeverityColor = (severity: string): string => {
    switch (severity) {
      case "critical":
        return "text-red-400 border-red-400 bg-red-500/10"
      case "high":
        return "text-orange-400 border-orange-400 bg-orange-500/10"
      case "medium":
        return "text-yellow-400 border-yellow-400 bg-yellow-500/10"
      case "low":
        return "text-green-400 border-green-400 bg-green-500/10"
      default:
        return "text-gray-400 border-gray-400 bg-gray-500/10"
    }
  }

  const getExploitLink = () => {
    return `/exploits/${exploit.id}`
  }

  // Format date safely
  const formatDate = (dateString: string) => {
    try {
      return new Date(dateString).toLocaleDateString()
    } catch (e) {
      return "Unknown date"
    }
  }

  return (
    <Card className="bg-[#1a1a1a] border-[#2a2a3a] hover:border-[#00ff9d]/30 transition-all duration-300">
      <CardContent className="p-6">
        <div className="flex flex-col md:flex-row justify-between gap-4 mb-4">
          <div className="flex-grow">
            <Link href={getExploitLink()}>
              <h3 className="text-xl font-bold font-mono text-[#00ff9d] mb-2 hover:underline cursor-pointer">
                {exploit.name || "Unnamed Exploit"}
              </h3>
            </Link>
            <p className="text-gray-300 font-mono text-sm mb-4">{exploit.description || "No description available."}</p>
          </div>
          <div className="flex flex-col gap-2 min-w-[150px]">
            <Badge variant="outline" className={`font-mono ${getSeverityColor(exploit.severity || "medium")}`}>
              <Shield className="w-3 h-3 mr-1" />
              {(exploit.severity || "medium").toUpperCase()}
            </Badge>
            {exploit.cve_id ? (
              <Badge variant="outline" className="font-mono text-[#00b8ff] border-[#00b8ff] bg-blue-500/10">
                {exploit.cve_id}
              </Badge>
            ) : (
              <Badge variant="outline" className="font-mono text-gray-400 border-gray-400 bg-gray-500/10">
                No CVE
              </Badge>
            )}
            {exploit.is_verified && (
              <Badge variant="outline" className="font-mono text-green-400 border-green-400 bg-green-500/10">
                âœ“ Verified
              </Badge>
            )}
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
          <div className="flex items-center">
            <Calendar className="h-4 w-4 text-gray-400 mr-2" />
            <span className="text-gray-300 font-mono text-sm">
              {exploit.created_at ? formatDate(exploit.created_at) : "Unknown date"}
            </span>
          </div>
          <div className="flex items-center">
            <User className="h-4 w-4 text-gray-400 mr-2" />
            <span className="text-gray-300 font-mono text-sm">{exploit.author?.username || "Anonymous"}</span>
          </div>
          <div className="flex items-center">
            <Server className="h-4 w-4 text-gray-400 mr-2" />
            <span className="text-gray-300 font-mono text-sm">{exploit.target_system || "Unknown target"}</span>
          </div>
        </div>

        {exploit.tags && exploit.tags.length > 0 && (
          <div className="flex flex-wrap gap-2 mb-4">
            {exploit.tags.map((tag, index) => (
              <Badge key={index} variant="outline" className="font-mono text-xs text-gray-300 border-[#2a2a3a]">
                {tag}
              </Badge>
            ))}
          </div>
        )}

        <div className="flex justify-between items-center">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setShowCode(!showCode)}
            className="font-mono border-[#2a2a3a] text-gray-300 hover:bg-[#2a2a3a] hover:text-white"
          >
            <Code className="mr-2 h-4 w-4" />
            {showCode ? "Hide Code" : "View Code"}
            {showCode ? <ChevronUp className="ml-2 h-4 w-4" /> : <ChevronDown className="ml-2 h-4 w-4" />}
          </Button>

          <div className="flex gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={copyToClipboard}
              className="font-mono border-[#2a2a3a] text-gray-300 hover:bg-[#2a2a3a] hover:text-white"
            >
              {copied ? (
                <>
                  <Check className="mr-2 h-4 w-4 text-green-400" />
                  Copied
                </>
              ) : (
                <>
                  <Copy className="mr-2 h-4 w-4" />
                  Copy
                </>
              )}
            </Button>
            <Link href={getExploitLink()}>
              <Button
                variant="outline"
                size="sm"
                className="font-mono border-[#2a2a3a] text-[#00ff9d] hover:bg-[#2a2a3a] hover:text-[#00ff9d]"
              >
                Details
              </Button>
            </Link>
          </div>
        </div>

        {showCode && (
          <div className="mt-4 p-4 bg-[#0a0a0c] border border-[#2a2a3a] rounded-md overflow-x-auto">
            <pre className="font-mono text-sm text-gray-300 whitespace-pre-wrap">
              {exploit.code || "// No code available"}
            </pre>
          </div>
        )}
      </CardContent>
    </Card>
  )
}
