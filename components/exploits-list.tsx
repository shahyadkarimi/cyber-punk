"use client"

import { useState, useEffect } from "react"
import { Search, Filter, ChevronDown, AlertTriangle, Shield, RefreshCw } from "lucide-react"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import ExploitCard from "@/components/exploit-card"
import { ExploitsService, type Exploit } from "@/lib/database-services/exploits-service"

export default function ExploitsList() {
  const [exploits, setExploits] = useState<Exploit[]>([])
  const [filteredExploits, setFilteredExploits] = useState<Exploit[]>([])
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedSeverity, setSelectedSeverity] = useState<string>("all")
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [refreshing, setRefreshing] = useState(false)

  useEffect(() => {
    loadExploits()
  }, [])

  const loadExploits = async () => {
    try {
      setLoading(true)
      setError(null)
      console.log("Loading verified exploits...")

      const data = await ExploitsService.getVerifiedExploits()
      console.log(`Loaded ${data.length} verified exploits`)

      setExploits(data)
      setFilteredExploits(data)
    } catch (err) {
      console.error("Error loading exploits:", err)
      setError(err instanceof Error ? err.message : "Failed to load exploits")
    } finally {
      setLoading(false)
    }
  }

  const refreshExploits = async () => {
    try {
      setRefreshing(true)
      console.log("Refreshing exploits...")

      const data = await ExploitsService.refreshVerifiedExploits()
      console.log(`Refreshed ${data.length} verified exploits`)

      setExploits(data)
      setFilteredExploits(data)
    } catch (err) {
      console.error("Error refreshing exploits:", err)
      setError(err instanceof Error ? err.message : "Failed to refresh exploits")
    } finally {
      setRefreshing(false)
    }
  }

  useEffect(() => {
    let filtered = exploits

    // Filter by search term
    if (searchTerm) {
      filtered = filtered.filter(
        (exploit) =>
          exploit.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          exploit.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
          exploit.target_system.toLowerCase().includes(searchTerm.toLowerCase()) ||
          exploit.cve_id?.toLowerCase().includes(searchTerm.toLowerCase()),
      )
    }

    // Filter by severity
    if (selectedSeverity !== "all") {
      filtered = filtered.filter((exploit) => exploit.severity === selectedSeverity)
    }

    setFilteredExploits(filtered)
  }, [exploits, searchTerm, selectedSeverity])

  const handleSearch = async () => {
    if (!searchTerm.trim()) {
      setFilteredExploits(exploits)
      return
    }

    try {
      setLoading(true)
      const results = await ExploitsService.searchExploits(searchTerm)
      setFilteredExploits(results.filter((exploit) => exploit.is_verified))
    } catch (err) {
      setError(err instanceof Error ? err.message : "Search failed")
    } finally {
      setLoading(false)
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "bg-red-500/20 text-red-400 border-red-500/30"
      case "high":
        return "bg-orange-500/20 text-orange-400 border-orange-500/30"
      case "medium":
        return "bg-yellow-500/20 text-yellow-400 border-yellow-500/30"
      case "low":
        return "bg-green-500/20 text-green-400 border-green-500/30"
      default:
        return "bg-gray-500/20 text-gray-400 border-gray-500/30"
    }
  }

  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center py-20">
        <div className="w-16 h-16 border-4 border-t-[#00ff9d] border-r-transparent border-b-transparent border-l-transparent rounded-full animate-spin mb-4"></div>
        <p className="text-[#00ff9d] font-mono text-lg">Loading exploits database...</p>
      </div>
    )
  }

  if (error) {
    return (
      <div className="text-center py-20">
        <AlertTriangle className="h-16 w-16 text-red-400 mx-auto mb-4" />
        <p className="text-red-400 mb-4 font-mono">{error}</p>
        <div className="flex gap-2 justify-center">
          <Button
            onClick={loadExploits}
            variant="outline"
            className="border-[#2a2a3a] text-gray-300 hover:bg-[#2a2a3a]"
          >
            Try Again
          </Button>
          <Button
            onClick={refreshExploits}
            variant="outline"
            className="border-[#2a2a3a] text-gray-300 hover:bg-[#2a2a3a]"
          >
            <RefreshCw className="mr-2 h-4 w-4" />
            Refresh
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Search and Filter Bar */}
      <div className="flex flex-col md:flex-row gap-4 p-4 bg-[#1a1a1a]/50 border border-[#2a2a3a] rounded-md backdrop-blur-sm">
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
          <Input
            placeholder="Search exploits by name, description, target, or CVE..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            onKeyPress={(e) => e.key === "Enter" && handleSearch()}
            className="pl-10 bg-[#0a0a0c] border-[#2a2a3a] text-gray-300 placeholder-gray-500 focus:border-[#00ff9d]"
          />
        </div>
        <Button onClick={handleSearch} className="bg-[#00ff9d] text-black hover:bg-[#00ff9d]/80 font-mono">
          Search
        </Button>
        <Button
          onClick={refreshExploits}
          disabled={refreshing}
          variant="outline"
          className="border-[#2a2a3a] text-gray-300 hover:bg-[#2a2a3a]"
        >
          <RefreshCw className={`mr-2 h-4 w-4 ${refreshing ? "animate-spin" : ""}`} />
          Refresh
        </Button>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" className="border-[#2a2a3a] text-gray-300 hover:bg-[#2a2a3a]">
              <Filter className="mr-2 h-4 w-4" />
              Severity: {selectedSeverity === "all" ? "All" : selectedSeverity}
              <ChevronDown className="ml-2 h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent className="bg-[#1a1a1a] border-[#2a2a3a]">
            <DropdownMenuItem onClick={() => setSelectedSeverity("all")} className="text-gray-300 hover:bg-[#2a2a3a]">
              All Severities
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={() => setSelectedSeverity("critical")}
              className="text-gray-300 hover:bg-[#2a2a3a]"
            >
              Critical
            </DropdownMenuItem>
            <DropdownMenuItem onClick={() => setSelectedSeverity("high")} className="text-gray-300 hover:bg-[#2a2a3a]">
              High
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={() => setSelectedSeverity("medium")}
              className="text-gray-300 hover:bg-[#2a2a3a]"
            >
              Medium
            </DropdownMenuItem>
            <DropdownMenuItem onClick={() => setSelectedSeverity("low")} className="text-gray-300 hover:bg-[#2a2a3a]">
              Low
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="p-4 bg-[#1a1a1a] border border-[#2a2a3a] rounded-md">
          <div className="text-2xl font-bold text-[#00ff9d]">{exploits.length}</div>
          <div className="text-sm text-gray-400 font-mono">Verified Exploits</div>
        </div>
        <div className="p-4 bg-[#1a1a1a] border border-[#2a2a3a] rounded-md">
          <div className="text-2xl font-bold text-red-400">
            {exploits.filter((e) => e.severity === "critical").length}
          </div>
          <div className="text-sm text-gray-400 font-mono">Critical</div>
        </div>
        <div className="p-4 bg-[#1a1a1a] border border-[#2a2a3a] rounded-md">
          <div className="text-2xl font-bold text-orange-400">
            {exploits.filter((e) => e.severity === "high").length}
          </div>
          <div className="text-sm text-gray-400 font-mono">High</div>
        </div>
        <div className="p-4 bg-[#1a1a1a] border border-[#2a2a3a] rounded-md">
          <div className="text-2xl font-bold text-[#00b8ff]">{exploits.filter((e) => e.cve_id).length}</div>
          <div className="text-sm text-gray-400 font-mono">With CVE</div>
        </div>
      </div>

      {/* Results */}
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-bold font-mono text-[#00ff9d] flex items-center">
          <Shield className="mr-2 h-5 w-5" />
          {filteredExploits.length} Exploit{filteredExploits.length !== 1 ? "s" : ""} Found
        </h2>
        <div className="flex gap-2">
          {["critical", "high", "medium", "low"]
            .filter((severity) => exploits.some((exploit) => exploit.severity === severity))
            .map((severity) => (
              <Badge key={severity} className={getSeverityColor(severity)}>
                {severity.toUpperCase()}
              </Badge>
            ))}
        </div>
      </div>

      {/* Exploits Grid */}
      {filteredExploits.length === 0 ? (
        <div className="text-center py-12 border border-dashed border-[#2a2a3a] rounded-lg">
          <AlertTriangle className="h-12 w-12 text-gray-500 mx-auto mb-4" />
          <p className="text-gray-400 mb-4 font-mono">
            {exploits.length === 0
              ? "No verified exploits available yet."
              : "No exploits found matching your criteria."}
          </p>
          {exploits.length > 0 && (
            <Button
              onClick={() => {
                setSearchTerm("")
                setSelectedSeverity("all")
              }}
              variant="outline"
              className="border-[#2a2a3a] text-gray-300 hover:bg-[#2a2a3a]"
            >
              Clear Filters
            </Button>
          )}
        </div>
      ) : (
        <div className="grid gap-6">
          {filteredExploits.map((exploit) => (
            <ExploitCard key={exploit.id} exploit={exploit} />
          ))}
        </div>
      )}
    </div>
  )
}
