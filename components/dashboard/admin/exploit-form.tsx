"use client";

import type React from "react";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Badge } from "@/components/ui/badge";
import { X } from "lucide-react";
import {
  ExploitsService,
  type Exploit,
} from "@/lib/database-services/exploits-service";
import { useAuth } from "@/hooks/use-auth";
import { useToast } from "@/hooks/use-toast";
import { postData } from "@/services/API";
import { Alert, AlertDescription } from "@/components/ui/alert";

type ExploitFormData = {
  name: string;
  description: string;
  code: string;
  target_system: string;
  cve_id?: string;
  severity: "low" | "medium" | "high" | "critical";
  tags: string[];
  is_verified: boolean;
};

type errorsType = Partial<{
  name: string;
  description: string;
  code: string;
  target_system: string;
  severity: string;
}>;

function validateExploitsForm(data: ExploitFormData) {
  const errors: Partial<Record<keyof Exploit, string>> = {};

  if (!data.name.trim()) {
    errors.name = "Name is required.";
  }

  if (!data.description.trim()) {
    errors.description = "Description is required.";
  }

  if (!data.code.trim()) {
    errors.code = "Exploit code is required.";
  }

  if (!data.target_system.trim()) {
    errors.target_system = "Target system is required.";
  }

  if (!["low", "medium", "high", "critical"].includes(data.severity)) {
    errors.severity = "Invalid severity level.";
  }

  if (!Array.isArray(data.tags)) {
    errors.tags = "Tags must be an array.";
  }

  return {
    isValid: Object.keys(errors).length === 0,
    errors,
  };
}

interface ExploitFormProps {
  exploit?: Exploit | null;
  onSuccess: () => void;
  onCancel: () => void;
}

export default function ExploitForm({
  exploit,
  onSuccess,
  onCancel,
}: ExploitFormProps) {
  const { user } = useAuth();
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    description: "",
    code: "",
    target_system: "",
    cve_id: "",
    severity: exploit?.severity || "medium",
    tags: [] as string[],
    is_verified: true,
  });
  const [newTag, setNewTag] = useState("");
  const [errors, setErrors] = useState<errorsType>({});
  const [errorMessage, setErrorMessage] = useState<string>("");

  useEffect(() => {
    if (exploit) {
      setFormData({
        name: exploit.name || "",
        description: exploit.description || "",
        code: exploit.code || "",
        target_system: exploit.target_system || "",
        cve_id: exploit.cve_id || "",
        severity: exploit.severity || "medium",
        tags: exploit.tags || [],
        is_verified: exploit.is_verified || false,
      });
    }
  }, [exploit]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user) {
      toast({
        title: "Error",
        description: "You must be logged in to create exploits",
      });
      return;
    }
    setErrors({});

    const { isValid, errors } = validateExploitsForm(formData);

    if (!isValid) {
      setErrors(errors);
    } else {
      setLoading(true);
      if (exploit) {
        // edit exploit
        postData("/admin/exploit/edit", { id: exploit.id, ...formData })
          .then((res) => {
            toast({
              title: "Success",
              description: "Exploit edited successfully",
            });

            setLoading(false);
            onSuccess();
          })
          .catch((err) => {
            setLoading(false);
            setErrorMessage(err?.response?.data?.error);

            toast({
              title: "Error",
              description: "Failed to edit exploit",
            });
          });
      } else {
        // create exploit
        postData("/admin/exploit/create", { ...formData })
          .then((res) => {
            toast({
              title: "Success",
              description: "Exploit created successfully",
            });

            setLoading(false);
            onSuccess();
          })
          .catch((err) => {
            setLoading(false);
            setErrorMessage(err?.response?.data?.error);

            toast({
              title: "Error",
              description: "Failed to create exploit",
            });
          });
      }
    }
  };

  const addTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData({
        ...formData,
        tags: [...formData.tags, newTag.trim()],
      });
      setNewTag("");
    }
  };

  const removeTag = (tagToRemove: string) => {
    setFormData({
      ...formData,
      tags: formData.tags.filter((tag) => tag !== tagToRemove),
    });
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {errorMessage && (
        <Alert className="border-red-500/50 bg-red-500/10 mb-2">
          <AlertDescription className="text-red-400">
            {errorMessage}
          </AlertDescription>
        </Alert>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="name" className="text-gray-300 font-mono">
            Exploit Name *
          </Label>
          <Input
            id="name"
            value={formData.name}
            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            placeholder="Enter exploit name"
            className="bg-[#0a0a0c] border-[#2a2a3a] text-gray-300 font-mono"
          />

          {errors.name && <p className="text-red-500 text-sm">{errors.name}</p>}
        </div>

        <div className="space-y-2">
          <Label htmlFor="target_system" className="text-gray-300 font-mono">
            Target System *
          </Label>
          <Input
            id="target_system"
            value={formData.target_system}
            onChange={(e) =>
              setFormData({ ...formData, target_system: e.target.value })
            }
            placeholder="e.g., WordPress 5.8, Apache 2.4"
            className="bg-[#0a0a0c] border-[#2a2a3a] text-gray-300 font-mono"
          />

          {errors.target_system && (
            <p className="text-red-500 text-sm">{errors.target_system}</p>
          )}
        </div>
      </div>

      <div className="space-y-2">
        <Label htmlFor="description" className="text-gray-300 font-mono">
          Description *
        </Label>
        <Textarea
          id="description"
          value={formData.description}
          onChange={(e) =>
            setFormData({ ...formData, description: e.target.value })
          }
          placeholder="Describe the vulnerability and its impact"
          rows={3}
          className="bg-[#0a0a0c] border-[#2a2a3a] text-gray-300 font-mono"
        />

        {errors.description && (
          <p className="text-red-500 text-sm">{errors.description}</p>
        )}
      </div>

      <div className="space-y-2">
        <Label htmlFor="code" className="text-gray-300 font-mono">
          Exploit Code *
        </Label>
        <Textarea
          id="code"
          value={formData.code}
          onChange={(e) => setFormData({ ...formData, code: e.target.value })}
          placeholder="Enter the exploit code or payload"
          rows={8}
          className="bg-[#0a0a0c] border-[#2a2a3a] text-gray-300 font-mono text-sm"
        />

        {errors.code && <p className="text-red-500 text-sm">{errors.code}</p>}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="severity" className="text-gray-300 font-mono">
            Severity *
          </Label>
          <Select
            value={formData.severity}
            onValueChange={(value: any) =>
              setFormData({ ...formData, severity: value })
            }
          >
            <SelectTrigger className="bg-[#0a0a0c] border-[#2a2a3a] text-gray-300 font-mono">
              <SelectValue placeholder="Select severity" />
            </SelectTrigger>
            <SelectContent className="bg-[#1a1a1a] border-[#2a2a3a]">
              <SelectItem
                value="low"
                className="text-gray-300 hover:bg-[#2a2a3a]"
              >
                Low
              </SelectItem>
              <SelectItem
                value="medium"
                className="text-gray-300 hover:bg-[#2a2a3a]"
              >
                Medium
              </SelectItem>
              <SelectItem
                value="high"
                className="text-gray-300 hover:bg-[#2a2a3a]"
              >
                High
              </SelectItem>
              <SelectItem
                value="critical"
                className="text-gray-300 hover:bg-[#2a2a3a]"
              >
                Critical
              </SelectItem>
            </SelectContent>
          </Select>

          {errors.severity && (
            <p className="text-red-500 text-sm">{errors.severity}</p>
          )}
        </div>

        <div className="space-y-2">
          <Label htmlFor="cve_id" className="text-gray-300 font-mono">
            CVE ID
          </Label>
          <Input
            id="cve_id"
            value={formData.cve_id}
            onChange={(e) =>
              setFormData({ ...formData, cve_id: e.target.value })
            }
            placeholder="e.g., CVE-2021-44228"
            className="bg-[#0a0a0c] border-[#2a2a3a] text-gray-300 font-mono"
          />
        </div>
      </div>

      <div className="space-y-2">
        <Label className="text-gray-300 font-mono">Tags</Label>
        <div className="flex gap-2">
          <Input
            value={newTag}
            onChange={(e) => setNewTag(e.target.value)}
            placeholder="Add a tag"
            onKeyPress={(e) =>
              e.key === "Enter" && (e.preventDefault(), addTag())
            }
            className="bg-[#0a0a0c] border-[#2a2a3a] text-gray-300 font-mono"
          />
          <Button
            type="button"
            onClick={addTag}
            variant="outline"
            className="border-[#2a2a3a] text-gray-300"
          >
            Add
          </Button>
        </div>
        <div className="flex flex-wrap gap-2 mt-2">
          {formData.tags.map((tag, index) => (
            <Badge
              key={index}
              variant="outline"
              className="text-gray-300 border-[#2a2a3a]"
            >
              {tag}
              <X
                className="ml-1 h-3 w-3 cursor-pointer"
                onClick={() => removeTag(tag)}
              />
            </Badge>
          ))}
        </div>
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox
          id="is_verified"
          checked={formData.is_verified}
          onCheckedChange={(checked) =>
            setFormData({ ...formData, is_verified: checked as boolean })
          }
          className="border-[#2a2a3a] data-[state=checked]:bg-[#00ff9d] data-[state=checked]:border-[#00ff9d]"
        />
        <Label htmlFor="is_verified" className="text-gray-300 font-mono">
          Mark as verified (will be visible on public exploits page)
        </Label>
      </div>

      <div className="flex justify-end gap-4 pt-4">
        <Button
          type="button"
          onClick={onCancel}
          variant="outline"
          className="border-[#2a2a3a] text-gray-300"
        >
          Cancel
        </Button>
        <Button
          type="submit"
          disabled={loading}
          className="bg-[#00ff9d] text-black hover:bg-[#00ff9d]/80 font-mono"
        >
          {loading
            ? "Saving..."
            : exploit
            ? "Update Exploit"
            : "Create Exploit"}
        </Button>
      </div>
    </form>
  );
}
