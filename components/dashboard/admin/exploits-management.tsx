"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Plus, Search, Edit, Trash2, Shield, Eye, EyeOff } from "lucide-react";
import {
  ExploitsService,
  type Exploit,
} from "@/lib/database-services/exploits-service";
import ExploitForm from "./exploit-form";
import { useToast } from "@/hooks/use-toast";
import { postData } from "@/services/API";
import { Toaster } from "@/components/ui/toaster";
import { useAuth } from "@/hooks/use-auth";

export default function ExploitsManagement() {
  const [exploits, setExploits] = useState<Exploit[]>([]);
  const [filteredExploits, setFilteredExploits] = useState<Exploit[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [loading, setLoading] = useState(true);
  const [deleteLoading, setDeleteLoading] = useState(false);
  const [selectedExploit, setSelectedExploit] = useState<Exploit | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [showForm, setShowForm] = useState(false);
  const { toast } = useToast();
  const { user } = useAuth();

  useEffect(() => {
    loadExploits();
  }, []);

  useEffect(() => {
    if (searchTerm) {
      const filtered = exploits.filter(
        (exploit) =>
          exploit.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          exploit.description
            .toLowerCase()
            .includes(searchTerm.toLowerCase()) ||
          exploit.target_system
            .toLowerCase()
            .includes(searchTerm.toLowerCase()) ||
          exploit.cve_id?.toLowerCase().includes(searchTerm.toLowerCase())
      );
      setFilteredExploits(filtered);
    } else {
      setFilteredExploits(exploits);
    }
  }, [searchTerm, exploits]);

  const loadExploits = async (search?: string) => {
    setLoading(true);

    postData("/admin/exploit/get-all", { search })
      .then((res) => {
        setExploits(res.data.exploits);
        setFilteredExploits(res.data.exploits);
        setLoading(false);
      })
      .catch((err) => {
        setLoading(false);
        toast({
          title: err?.response?.data?.error,
          description: err.message,
        });
      });
  };

  const handleDelete = async () => {
    if (!selectedExploit) return;

    setDeleteLoading(true);

    postData("/admin/exploit/delete", { id: selectedExploit?.id })
      .then(async (res) => {
        await loadExploits();
        setDeleteLoading(false);
        setIsDeleteDialogOpen(false);
        setSelectedExploit(null);
      })
      .catch((err) => {
        setDeleteLoading(false);

        toast({
          title: "Delete exploit faild",
          description: err?.response?.data?.error || "Faild delete exploit",
          variant: "default",
        });
      });
  };

  const handleVerifyToggle = async (exploit: Exploit) => {
    if (!user?._id) {
      toast({
        title: "Authentication Error",
        description: "Admin user ID not found.",
        variant: "default",
      });
      return;
    }

    postData("/admin/exploit/change-status", {
      id: exploit.id,
    })
      .then((res) => {
        setLoading(false);

        toast({
          title: "Status Updated",
          description: `${exploit.name} status changed to ${
            res.data.new_status ? "verified" : "pending"
          }.`,
        });

        loadExploits();
      })
      .catch((err) => {
        toast({
          title: "Error updating status",
          description: err?.response?.data?.error,
          variant: "default",
        });
      });
  };

  const handleFormSuccess = () => {
    setShowForm(false);
    setSelectedExploit(null);
    loadExploits();
  };

  const handleDeleteClick = (exploit: Exploit) => {
    setSelectedExploit(exploit);
    setIsDeleteDialogOpen(true);
  };

  const handleFormCancel = () => {
    setShowForm(false);
    setSelectedExploit(null);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "bg-red-500/20 text-red-400 border-red-500/30";
      case "high":
        return "bg-orange-500/20 text-orange-400 border-orange-500/30";
      case "medium":
        return "bg-yellow-500/20 text-yellow-400 border-yellow-500/30";
      case "low":
        return "bg-green-500/20 text-green-400 border-green-500/30";
      default:
        return "bg-gray-500/20 text-gray-400 border-gray-500/30";
    }
  };

  return (
    <div className="space-y-6">
      <Toaster />

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="bg-[#1a1a1a] border-[#2a2a3a]">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-mono text-gray-400">
              Total Exploits
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-[#00ff9d]">
              {exploits.length}
            </div>
          </CardContent>
        </Card>
        <Card className="bg-[#1a1a1a] border-[#2a2a3a]">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-mono text-gray-400">
              Verified
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-400">
              {exploits.filter((e) => e.is_verified).length}
            </div>
          </CardContent>
        </Card>
        <Card className="bg-[#1a1a1a] border-[#2a2a3a]">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-mono text-gray-400">
              Critical
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-400">
              {exploits.filter((e) => e.severity === "critical").length}
            </div>
          </CardContent>
        </Card>
        <Card className="bg-[#1a1a1a] border-[#2a2a3a]">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-mono text-gray-400">
              With CVE
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-[#00b8ff]">
              {exploits.filter((e) => e.cve_id).length}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Controls */}
      <div className="flex flex-col md:flex-row gap-4 justify-between">
        <div className="relative flex-1 max-w-md">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
          <Input
            placeholder="Search exploits..."
            value={searchTerm}
            onChange={(e) => {
              setSearchTerm(e.target.value);

              loadExploits(e.target.value);
            }}
            className="pl-10 bg-[#0a0a0c] border-[#2a2a3a] text-gray-300"
          />
        </div>

        <Dialog open={showForm} onOpenChange={setShowForm}>
          <DialogTrigger asChild>
            <Button
              onClick={() => {
                setSelectedExploit(null);
                setShowForm(true);
              }}
              className="bg-[#00ff9d] text-black hover:bg-[#00ff9d]/80 font-mono"
            >
              <Plus className="mr-2 h-4 w-4" />
              Add Exploit
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto bg-[#1a1a1a] border-[#2a2a3a]">
            <DialogHeader>
              <DialogTitle className="text-[#00ff9d] font-mono">
                {selectedExploit ? "Edit Exploit" : "Create New Exploit"}
              </DialogTitle>
            </DialogHeader>
            <ExploitForm
              exploit={selectedExploit}
              onSuccess={handleFormSuccess}
              onCancel={handleFormCancel}
            />
          </DialogContent>
        </Dialog>

        {/* Delete Confirmation Dialog */}
        <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
          <DialogContent className="bg-[#1a1a1a] border-[#2a2a3a] text-white">
            <DialogHeader>
              <DialogTitle className="text-red-500 text-xl">
                Confirm Deletion
              </DialogTitle>
            </DialogHeader>
            <div className="py-4">
              <p>
                Are you sure you want to delete the shell{" "}
                <span className="font-bold">{selectedExploit?.name}</span>?
              </p>
              <p className="text-gray-400 mt-2">
                This action cannot be undone.
              </p>
            </div>
            <div className="flex justify-end gap-3">
              <Button
                variant="outline"
                onClick={() => setIsDeleteDialogOpen(false)}
              >
                Cancel
              </Button>
              <Button
                variant="destructive"
                className="bg-red-600 hover:bg-red-700 text-white"
                onClick={handleDelete}
              >
                {deleteLoading ? "Deleting..." : "Delete"}
              </Button>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {/* Exploits Table */}
      <Card className="bg-[#1a1a1a] border-[#2a2a3a]">
        <CardContent className="p-0">
          {loading ? (
            <div className="flex justify-center items-center py-12">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#00ff9d]"></div>
            </div>
          ) : filteredExploits.length === 0 ? (
            <div className="text-center py-12">
              <Shield className="h-12 w-12 text-gray-500 mx-auto mb-4" />
              <p className="text-gray-400 font-mono">
                {searchTerm
                  ? "No exploits found matching your search."
                  : "No exploits created yet."}
              </p>
            </div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow className="border-[#2a2a3a] hover:bg-[#2a2a3a]/50">
                  <TableHead className="text-gray-300 font-mono">
                    Name
                  </TableHead>
                  <TableHead className="text-gray-300 font-mono">
                    Target System
                  </TableHead>
                  <TableHead className="text-gray-300 font-mono">
                    Severity
                  </TableHead>
                  <TableHead className="text-gray-300 font-mono">CVE</TableHead>
                  <TableHead className="text-gray-300 font-mono">
                    Status
                  </TableHead>
                  <TableHead className="text-gray-300 font-mono">
                    Author
                  </TableHead>
                  <TableHead className="text-gray-300 font-mono">
                    Created
                  </TableHead>
                  <TableHead className="text-gray-300 font-mono">
                    Actions
                  </TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredExploits.map((exploit) => (
                  <TableRow
                    key={exploit.id}
                    className="border-[#2a2a3a] hover:bg-[#2a2a3a]/30"
                  >
                    <TableCell className="font-mono text-gray-300">
                      <div className="max-w-[200px] truncate">
                        {exploit.name}
                      </div>
                    </TableCell>
                    <TableCell className="font-mono text-gray-400">
                      <div className="max-w-[150px] truncate">
                        {exploit.target_system}
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge className={getSeverityColor(exploit.severity)}>
                        {exploit.severity.toUpperCase()}
                      </Badge>
                    </TableCell>
                    <TableCell className="font-mono text-gray-400">
                      {exploit.cve_id ? (
                        <Badge
                          variant="outline"
                          className="text-[#00b8ff] border-[#00b8ff]"
                        >
                          {exploit.cve_id}
                        </Badge>
                      ) : (
                        <span className="text-gray-500">-</span>
                      )}
                    </TableCell>
                    <TableCell>
                      {exploit.is_verified ? (
                        <Badge className="bg-green-500/20 text-green-400 border-green-500/30">
                          Verified
                        </Badge>
                      ) : (
                        <Badge className="bg-gray-500/20 text-gray-400 border-gray-500/30">
                          Pending
                        </Badge>
                      )}
                    </TableCell>
                    <TableCell className="font-mono text-gray-400">
                      {exploit.author?.username || "Unknown"}
                    </TableCell>
                    <TableCell className="font-mono text-gray-400">
                      {new Date(exploit.created_at).toLocaleDateString()}
                    </TableCell>
                    <TableCell>
                      <div className="flex gap-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleVerifyToggle(exploit)}
                          className="h-8 border-[#2a2a3a] text-blue-600 hover:bg-blue-600/15 hover:text-blue-600"
                        >
                          {exploit.is_verified ? (
                            <EyeOff className="h-4 w-4" />
                          ) : (
                            <Eye className="h-4 w-4" />
                          )}
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => {
                            setSelectedExploit(exploit);
                            setShowForm(true);
                          }}
                          className="h-8 border-[#2a2a3a] text-neon-green hover:bg-neon-green/15 hover:text-neon-green"
                        >
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleDeleteClick(exploit)}
                          className="h-8 border-[#2a2a3a] text-red-500 hover:bg-red-900/15 hover:text-red-500"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
